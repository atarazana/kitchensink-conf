apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: {{ .Values.kitchensinkContinuosIntegrationPipeline }}
  namespace: {{ .Values.cicdNamespace }}
  labels:
    app.kubernetes.io/instance: {{ .Values.kitchensinkServiceName }}
    pipeline.openshift.io/runtime: quarkus
    pipeline.openshift.io/type: knative
spec:
  params:
    - name: APP_NAME
      type: string
      default: "{{ .Values.kitchensinkServiceName }}"
    - name: GIT_PROVIDER
      type: string
    - name: GIT_REPO
      type: string
    - name: GIT_REPO_NAME
      type: string
    - name: GIT_REVISION
      type: string
      default: main
    - name: GIT_REPO_CONFIG
      type: string
    - name: GIT_REVISION_CONFIG
      type: string
      default: main
    - name: BUILD_CONFIG_NAME
      type: string
      default: "{{ .Values.kitchensinkServiceName }}-bc"
    - name: IMAGE_NAME
      type: string
    - name: IMAGE_TAG
      type: string
    - name: PATH_CONTEXT
      type: string
      default: .
    - name: GIT_SSL_VERIFY
      type: string
      default: '{{ .Values.gitSslVerify }}'
  tasks:
    - name: fetch-repository
      params:
        - name: url
          value: $(params.GIT_REPO)
        - name: revision
          value: $(params.GIT_REVISION)
        - name: deleteExisting
          value: 'true'
        - name: sslVerify
          value: $(params.GIT_SSL_VERIFY)
      taskRef:
        kind: ClusterTask
        name: git-clone
      workspaces:
        - name: output
          workspace: workspace-source
    # - name: package
    #   params:
    #     - name: PATH_CONTEXT
    #       value: $(params.PATH_CONTEXT)
    #   runAfter:
    #     - fetch-repository
    #   taskRef:
    #     kind: ClusterTask
    #     name: quarkus-package
    #   workspaces:
    #     - name: source
    #       workspace: workspace-source
    #     - name: cache
    #       workspace: workspace-cache
    - name: build
      params:
        - name: SCRIPT
          value: oc start-build $(params.BUILD_CONFIG_NAME) --wait
      runAfter:
        - fetch-repository
      taskRef:
        kind: ClusterTask
        name: openshift-client
    - name: digest
      params:
        - name: IMAGE_TAG
          # value: "$(params.IMAGE_NAME):$(params.IMAGE_TAG)"
          value: "{{ .Values.kitchensinkServiceName }}:latest"
      runAfter:
        - build
      taskRef:
        kind: ClusterTask
        {{ if .Values.username }}
        name: image-digest-{{ .Values.username }}
        {{ else }}
        name: image-digest
        {{ end }}
    # - name: build
    #   params:
    #     - name: IMAGE
    #       value: "$(params.IMAGE_NAME):$(params.IMAGE_TAG)"
    #     - name: TLSVERIFY
    #       value: 'false'
    #     - name: PATH_CONTEXT
    #       value: $(params.PATH_CONTEXT)
    #     - name: DOCKERFILE_PATH
    #       value: './Containerfile'
    #     - name: ARTIFACT_DIR
    #       value: 'kitchensink-app/kitchensink-app-ear/target'
    #     - name: MAVEN_ARGS
    #       value: '-e -P openshift,linea-singleton,linea -DskipTests -Dcom.redhat.xpaas.repo.redhatga clean install'
    #     - name: MAVEN_MIRROR_URL
    #       value: "{{ .Values.mavenMirror }}"
    #     - name: CUSTOM_INSTALL_DIRECTORIES
    #       value: 'extensions'
    #   runAfter:
    #     # - package
    #     - fetch-repository
    #   taskRef:
    #     kind: ClusterTask
    #     name: buildah-custom-build
    #   workspaces:
    #     - name: source
    #       workspace: workspace-source
    - name: fetch-config-repository
      when:
        - input: "$(tasks.digest.results.SUCCESS)"
          operator: in
          values: ['true']
      params:
        - name: url
          value: $(params.GIT_REPO_CONFIG)
        - name: revision
          value: $(params.GIT_REVISION_CONFIG)
        - name: deleteExisting
          value: 'true'
        - name: sslVerify
          value: $(params.GIT_SSL_VERIFY)
      runAfter:
        - digest
      taskRef:
        kind: ClusterTask
        name: git-clone
      workspaces:
        - name: output
          workspace: workspace-source
    - name: update-image
      params:
        - name: OVERLAYS_PATH
          value: "{{ .Values.kitchensinkOverlayPath }}"
        - name: OVERLAY
          value: "dev"
        - name: SELECT_EXPRESSIONS
          value: 
            - "(.images.[] | select(.name == \"*{{ .Values.kitchensinkServiceName }}*\")).newTag"
            - "(.images.[] | select(.name == \"*{{ .Values.kitchensinkServiceName }}*\")).newName"
        - name: NEW_VALUES
          value: 
            # - "$(tasks.build.results.IMAGE_DIGEST_CLEAN)"
            # - "{{ .Values.containerRegistryServer }}/{{ .Values.containerRegistryOrg }}/{{ .Values.appName }}-{{ .Values.kitchensinkServiceName }}@sha256"
            - "$(tasks.digest.results.IMAGE_DIGEST_CLEAN)"
            - "image-registry.openshift-image-registry.svc:5000/{{ .Values.cicdNamespace }}/kitchensink@sha256"
      runAfter:
        - fetch-config-repository
      taskRef:
        kind: ClusterTask
        {{ if .Values.username }}
        name: yq-eval-in-place-{{ .Values.username }}
        {{ else }}
        name: yq-eval-in-place
        {{ end }}
      workspaces:
        - name: source
          workspace: workspace-source
    - name: github-pr-create
      when:
        - input: "$(params.GIT_PROVIDER)"
          operator: in
          values: ['github']
      params:
        # PR Title describes the change and the overlay where it happens
        - name: PR_TITLE
          value: "Updating '{{ .Values.appName }}-{{ .Values.kitchensinkServiceName }}' image for overlay 'dev' with new image"
        # PR Body is a YAML with information for the next pipelines (stages)
        - name: PR_BODY
          value: |
            command: UPDATE_IMAGE
            serviceName: {{ .Values.kitchensinkServiceName }}
            count: 0
            overlay: dev
            kustomizationPath: {{ .Values.kitchensinkOverlayPath }}/dev/*/kustomization.yml
            imageDigestClean: $(tasks.digest.results.IMAGE_DIGEST_CLEAN)
            pipelineName: {{ .Values.kitchensinkContinuosIntegrationPipeline }}
        - name: PAT_SECRET_NAME
          value: {{ .Values.gitPatSecretName }}
        - name: PAT_SECRET_KEY
          value: {{ .Values.gitPatSecretKey }}
      runAfter:
        - update-image
      taskRef:
        kind: ClusterTask
        {{ if .Values.username }}
        name: github-pr-create-{{ .Values.username }}
        {{ else }}
        name: github-pr-create
        {{ end }}
      workspaces:
        - name: source
          workspace: workspace-source
    - name: gitea-pr-create
      when:
        - input: "$(params.GIT_PROVIDER)"
          operator: in
          values: ['gitea']
      params:
        - name: PR_BASE
          value: $(params.GIT_REVISION_CONFIG)
        # PR Title describes the change and the overlay where it happens
        - name: PR_TITLE
          value: "Updating '{{ .Values.appName }}-{{ .Values.kitchensinkServiceName }}' image for overlays 'dev/*' with new image"
        # PR Body is a YAML with information for the next pipelines (stages)
        - name: PR_BODY
          value: |
            command: UPDATE_IMAGE\nserviceName: {{ .Values.kitchensinkServiceName }}\ncount: 0\noverlay: dev\nkustomizationPath: {{ .Values.kitchensinkOverlayPath }}/dev/*/kustomization.yml\nimageDigestClean: $(tasks.digest.results.IMAGE_DIGEST_CLEAN)\npipelineName: {{ .Values.kitchensinkContinuosIntegrationPipeline }}
        - name: PAT_SECRET_NAME
          value: {{ .Values.gitPatSecretName }}
        - name: PAT_SECRET_KEY
          value: {{ .Values.gitPatSecretKey }}
      runAfter:
        - update-image
      taskRef:
        kind: ClusterTask
        {{ if .Values.username }}
        name: gitea-pr-create-{{ .Values.username }}
        {{ else }}
        name: gitea-pr-create
        {{ end }}
      workspaces:
        - name: source
          workspace: workspace-source
  workspaces:
    - name: workspace-source
    - name: workspace-cache
