apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  annotations:
    tekton.dev/displayName: Image Digest cluster task
    tekton.dev/pipelines.minVersion: '0.19'
    tekton.dev/tags: 'jq, oc'
  name: image-digest

  labels:
    app.kubernetes.io/version: '0.1'
    operator.tekton.dev/provider-type: redhat
spec:
  description: >-
    These Task finds an image and returns the digest.
  params:
    - description: Image + Tag to find
      name: IMAGE_TAG
      type: string
    - description: Namespace to find the image in
      name: SEARCH_NAMESPACE
      type: string
      default: ""
    - default: quay.io/atarazana/jq:0.0.2
      description: the image used where the jq binary is
      name: TASK_IMAGE
      type: string
  results:
    - description: Digest of the image just built without "sha256:"
      name: IMAGE_DIGEST_CLEAN
    - description: It shows if the process worked out fine or not 
      name: SUCCESS
  steps:
    - image: $(params.TASK_IMAGE)
      name: find-image
      resources: {}
      script: |
        #!/bin/sh

        IMAGE_TAG="$(params.IMAGE_TAG)"
        SEARCH_NAMESPACE=$(params.SEARCH_NAMESPACE)
        echo "IMAGE_TAG: ${IMAGE_TAG} SEARCH_NAMESPACE: ${SEARCH_NAMESPACE}"

        NAMESPACE_CLAUSE=$([[ ! -z "${SEARCH_NAMESPACE}" ]] && echo "-n ${SEARCH_NAMESPACE}" || echo "")
        echo "NAMESPACE_CLAUSE: ${NAMESPACE_CLAUSE}"

        IMAGE_DIGEST=$(oc get imagetags ${IMAGE_TAG} ${NAMESPACE_CLAUSE} | jq -r .image.metadata.name)
        echo "IMAGE_DIGEST: ${IMAGE_DIGEST}"

        PATTERN='.*\:(.*)'
        if [[ ${IMAGE_DIGEST} =~ ${PATTERN} ]]; then 
          IMAGE_DIGEST_CLEAN=${BASH_REMATCH[1]}
        fi

        if [ -z ${IMAGE_DIGEST_CLEAN} ]; then
            echo "ERROR => IMAGE_DIGEST_CLEAN IS EMPTY"
            echo -n "false" > /tekton/results/SUCCESS
        else
            echo "SUCCESS => IMAGE_DIGEST_CLEAN: ${IMAGE_DIGEST_CLEAN}"
            echo -n ${IMAGE_DIGEST_CLEAN} > /tekton/results/IMAGE_DIGEST_CLEAN
            echo -n "true" > /tekton/results/SUCCESS
        fi

